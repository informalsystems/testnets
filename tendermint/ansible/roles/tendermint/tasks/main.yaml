# Playbook for helping to deploy Tendermint
---
- name: Check if service is present
  stat: "path=/etc/systemd/system/{{ service.name }}.service"
  register: svc

- name: Stop service if present
  service: "name={{ service.name }} state=stopped"
  when: svc.stat.exists

- name: Ensure service group exists
  group:
    name: "{{ service.group }}"
    state: present

- name: Ensure service user exists
  user:
    name: "{{ service.user }}"
    shell: /bin/bash
    home: "/home/{{ service.user }}"
    group: "{{ service.group }}"

- name: Sync the service binary across to the server
  synchronize:
    src: "{{ service.src_binary }}"
    dest: "/usr/bin/{{ service.name }}"

- name: Ensure correct service binary permissions
  file:
    path: "/usr/bin/{{ service.name }}"
    mode: 0755
    owner: "{{ service.user }}"
    group: "{{ service.group }}"

- name: Delete any existing Tendermint configuration/data
  file: "path=/home/{{ service.user }}/.tendermint state=absent"
  when: service.copy_node_config == True

- name: Copy the Tendermint node configuration across
  copy:
    src: "{{ service.src_config_path }}/{{ inventory_hostname }}/"
    dest: "/home/{{ service.user }}/.tendermint/"
  when: service.copy_node_config == True

- name: Ensure the service user owns the Tendermint home directory
  file:
    path: "/home/{{ service.user }}/.tendermint/"
    recurse: yes
    owner: "{{ service.user }}"
    group: "{{ service.group }}"

- name: Ensure systemd service is present
  template:
    src: "{{ service.template }}"
    dest: "/etc/systemd/system/{{ service.name }}.service"

- name: Install ABCI application if required
  import_tasks: abci.yaml
  when: abci.deploy == True

- name: Reload systemd
  systemd: daemon_reload=yes
  when: abci.deploy == False

- name: Set service to required state
  service: "name={{ service.name }} state={{ service.state }}"
